# -*- coding: utf-8 -*-
# name: hacker
# key: kacker
# --
(ns `(flet ((try-src-prefix
	  (path src-pfx)
	  (let ((parts (split-string path src-pfx)))
	    (if (= 2 (length parts))
		(second parts)
	      nil))))
    (let* ((p (buffer-file-name))
           (p2 (first
		(remove-if-not '(lambda (x) x)
			       (mapcar
				'(lambda (pfx)
				   (try-src-prefix p pfx))
				'("/src/cljs/" "/src/clj/" "/src/")))))
	   (p3 (file-name-sans-extension p2))
	   (p4 (mapconcat '(lambda (x) x)
		 (split-string p3 "/")
		 ".")))
      (replace-regexp-in-string "_" "-" p4)))`
  (:require
   [clojure.test :refer :all]
   [clojure.string :as str]
   [clojure.java.io :as io]
))

(defmacro log
  [frm & params]
  `(println (format ~frm ~@params)))


(defn process
[]
)


(defn get-numbers
  [line]
   (map #(Long/parseLong %) (str/split (str/trim line) #"\s+")))

(def input00 "$0
")

(with-in-str input00
  ;;  (with-in-str (slurp (io/file (io/resource ".input01" )))
  (let [t (Integer/parseInt (read-line))]
    (dorun (repeatedly t #(println (process (get-numbers (read-line)))))))
)